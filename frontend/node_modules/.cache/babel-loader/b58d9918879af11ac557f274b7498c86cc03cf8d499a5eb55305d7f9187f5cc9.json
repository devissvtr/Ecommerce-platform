{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { useDeepMemo, wrapHook } from \"./internal/index.js\";\nimport equal from \"@wry/equality\";\nexport function useFragment(options) {\n  return wrapHook(\"useFragment\",\n  // eslint-disable-next-line react-compiler/react-compiler\n  useFragment_, useApolloClient(options.client))(options);\n}\nfunction useFragment_(options) {\n  var client = useApolloClient(options.client);\n  var cache = client.cache;\n  var from = options.from,\n    rest = __rest(options, [\"from\"]);\n  // We calculate the cache id seperately from `stableOptions` because we don't\n  // want changes to non key fields in the `from` property to affect\n  // `stableOptions` and retrigger our subscription. If the cache identifier\n  // stays the same between renders, we want to reuse the existing subscription.\n  var id = React.useMemo(function () {\n    return typeof from === \"string\" ? from : from === null ? null : cache.identify(from);\n  }, [cache, from]);\n  var stableOptions = useDeepMemo(function () {\n    return __assign(__assign({}, rest), {\n      from: id\n    });\n  }, [rest, id]);\n  // Since .next is async, we need to make sure that we\n  // get the correct diff on the next render given new diffOptions\n  var diff = React.useMemo(function () {\n    var fragment = stableOptions.fragment,\n      fragmentName = stableOptions.fragmentName,\n      from = stableOptions.from,\n      _a = stableOptions.optimistic,\n      optimistic = _a === void 0 ? true : _a;\n    if (from === null) {\n      return {\n        result: diffToResult({\n          result: {},\n          complete: false\n        })\n      };\n    }\n    var cache = client.cache;\n    var diff = cache.diff(__assign(__assign({}, stableOptions), {\n      returnPartialData: true,\n      id: from,\n      query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n      optimistic: optimistic\n    }));\n    return {\n      result: diffToResult(__assign(__assign({}, diff), {\n        result: client[\"queryManager\"].maskFragment({\n          fragment: fragment,\n          fragmentName: fragmentName,\n          data: diff.result\n        })\n      }))\n    };\n  }, [client, stableOptions]);\n  // Used for both getSnapshot and getServerSnapshot\n  var getSnapshot = React.useCallback(function () {\n    return diff.result;\n  }, [diff]);\n  return useSyncExternalStore(React.useCallback(function (forceUpdate) {\n    var lastTimeout = 0;\n    var subscription = stableOptions.from === null ? null : client.watchFragment(stableOptions).subscribe({\n      next: function (result) {\n        // Since `next` is called async by zen-observable, we want to avoid\n        // unnecessarily rerendering this hook for the initial result\n        // emitted from watchFragment which should be equal to\n        // `diff.result`.\n        if (equal(result, diff.result)) return;\n        diff.result = result;\n        // If we get another update before we've re-rendered, bail out of\n        // the update and try again. This ensures that the relative timing\n        // between useQuery and useFragment stays roughly the same as\n        // fixed in https://github.com/apollographql/apollo-client/pull/11083\n        clearTimeout(lastTimeout);\n        lastTimeout = setTimeout(forceUpdate);\n      }\n    });\n    return function () {\n      subscription === null || subscription === void 0 ? void 0 : subscription.unsubscribe();\n      clearTimeout(lastTimeout);\n    };\n  }, [client, stableOptions, diff]), getSnapshot, getSnapshot);\n}\nfunction diffToResult(diff) {\n  var result = {\n    data: diff.result,\n    complete: !!diff.complete\n  };\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map(function (error) {\n      return error.missing;\n    }));\n  }\n  return result;\n}\n//# sourceMappingURL=useFragment.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}