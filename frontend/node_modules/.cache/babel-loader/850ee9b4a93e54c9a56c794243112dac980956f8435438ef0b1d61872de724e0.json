{"ast":null,"code":"import { Trie } from \"@wry/trie\";\nimport { canUseWeakMap } from \"../../../utilities/index.js\";\nimport { InternalQueryReference } from \"./QueryReference.js\";\nimport { FragmentReference } from \"./FragmentReference.js\";\nvar SuspenseCache = /** @class */function () {\n  function SuspenseCache(options) {\n    if (options === void 0) {\n      options = Object.create(null);\n    }\n    this.queryRefs = new Trie(canUseWeakMap);\n    this.fragmentRefs = new Trie(canUseWeakMap);\n    this.options = options;\n  }\n  SuspenseCache.prototype.getQueryRef = function (cacheKey, createObservable) {\n    var ref = this.queryRefs.lookupArray(cacheKey);\n    if (!ref.current) {\n      ref.current = new InternalQueryReference(createObservable(), {\n        autoDisposeTimeoutMs: this.options.autoDisposeTimeoutMs,\n        onDispose: function () {\n          delete ref.current;\n        }\n      });\n    }\n    return ref.current;\n  };\n  SuspenseCache.prototype.getFragmentRef = function (cacheKey, client, options) {\n    var ref = this.fragmentRefs.lookupArray(cacheKey);\n    if (!ref.current) {\n      ref.current = new FragmentReference(client, options, {\n        autoDisposeTimeoutMs: this.options.autoDisposeTimeoutMs,\n        onDispose: function () {\n          delete ref.current;\n        }\n      });\n    }\n    return ref.current;\n  };\n  SuspenseCache.prototype.add = function (cacheKey, queryRef) {\n    var ref = this.queryRefs.lookupArray(cacheKey);\n    ref.current = queryRef;\n  };\n  return SuspenseCache;\n}();\nexport { SuspenseCache };\n//# sourceMappingURL=SuspenseCache.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}