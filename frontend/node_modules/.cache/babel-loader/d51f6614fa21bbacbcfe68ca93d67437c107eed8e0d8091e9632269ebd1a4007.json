{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\nimport { equal } from \"@wry/equality\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError, Observable } from \"../../core/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useDeepMemo } from \"./internal/useDeepMemo.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { toApolloError } from \"./useQuery.js\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\n/**\n * > Refer to the [Subscriptions](https://www.apollographql.com/docs/react/data/subscriptions/) section for a more in-depth overview of `useSubscription`.\n *\n * @example\n * ```jsx\n * const COMMENTS_SUBSCRIPTION = gql`\n *   subscription OnCommentAdded($repoFullName: String!) {\n *     commentAdded(repoFullName: $repoFullName) {\n *       id\n *       content\n *     }\n *   }\n * `;\n *\n * function DontReadTheComments({ repoFullName }) {\n *   const {\n *     data: { commentAdded },\n *     loading,\n *   } = useSubscription(COMMENTS_SUBSCRIPTION, { variables: { repoFullName } });\n *   return <h4>New comment: {!loading && commentAdded.content}</h4>;\n * }\n * ```\n * @remarks\n * #### Consider using `onData` instead of `useEffect`\n *\n * If you want to react to incoming data, please use the `onData` option instead of `useEffect`.\n * State updates you make inside a `useEffect` hook might cause additional rerenders, and `useEffect` is mostly meant for side effects of rendering, not as an event handler.\n * State updates made in an event handler like `onData` might - depending on the React version - be batched and cause only a single rerender.\n *\n * Consider the following component:\n *\n * ```jsx\n * export function Subscriptions() {\n *   const { data, error, loading } = useSubscription(query);\n *   const [accumulatedData, setAccumulatedData] = useState([]);\n *\n *   useEffect(() => {\n *     setAccumulatedData((prev) => [...prev, data]);\n *   }, [data]);\n *\n *   return (\n *     <>\n *       {loading && <p>Loading...</p>}\n *       {JSON.stringify(accumulatedData, undefined, 2)}\n *     </>\n *   );\n * }\n * ```\n *\n * Instead of using `useEffect` here, we can re-write this component to use the `onData` callback function accepted in `useSubscription`'s `options` object:\n *\n * ```jsx\n * export function Subscriptions() {\n *   const [accumulatedData, setAccumulatedData] = useState([]);\n *   const { data, error, loading } = useSubscription(\n *     query,\n *     {\n *       onData({ data }) {\n *         setAccumulatedData((prev) => [...prev, data])\n *       }\n *     }\n *   );\n *\n *   return (\n *     <>\n *       {loading && <p>Loading...</p>}\n *       {JSON.stringify(accumulatedData, undefined, 2)}\n *     </>\n *   );\n * }\n * ```\n *\n * > ⚠️ **Note:** The `useSubscription` option `onData` is available in Apollo Client >= 3.7. In previous versions, the equivalent option is named `onSubscriptionData`.\n *\n * Now, the first message will be added to the `accumulatedData` array since `onData` is called _before_ the component re-renders. React 18 automatic batching is still in effect and results in a single re-render, but with `onData` we can guarantee each message received after the component mounts is added to `accumulatedData`.\n *\n * @since 3.0.0\n * @param subscription - A GraphQL subscription document parsed into an AST by `gql`.\n * @param options - Options to control how the subscription is executed.\n * @returns Query result object\n */\nexport function useSubscription(subscription, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n  var hasIssuedDeprecationWarningRef = React.useRef(false);\n  var client = useApolloClient(options.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n  if (!hasIssuedDeprecationWarningRef.current) {\n    // eslint-disable-next-line react-compiler/react-compiler\n    hasIssuedDeprecationWarningRef.current = true;\n    if (options.onSubscriptionData) {\n      globalThis.__DEV__ !== false && invariant.warn(options.onData ? 61 : 62);\n    }\n    if (options.onSubscriptionComplete) {\n      globalThis.__DEV__ !== false && invariant.warn(options.onComplete ? 63 : 64);\n    }\n  }\n  var skip = options.skip,\n    fetchPolicy = options.fetchPolicy,\n    errorPolicy = options.errorPolicy,\n    shouldResubscribe = options.shouldResubscribe,\n    context = options.context,\n    extensions = options.extensions,\n    ignoreResults = options.ignoreResults;\n  var variables = useDeepMemo(function () {\n    return options.variables;\n  }, [options.variables]);\n  var recreate = function () {\n    return createSubscription(client, subscription, variables, fetchPolicy, errorPolicy, context, extensions);\n  };\n  var _a = React.useState(options.skip ? null : recreate),\n    observable = _a[0],\n    setObservable = _a[1];\n  var recreateRef = React.useRef(recreate);\n  useIsomorphicLayoutEffect(function () {\n    recreateRef.current = recreate;\n  });\n  if (skip) {\n    if (observable) {\n      setObservable(observable = null);\n    }\n  } else if (!observable || (client !== observable.__.client || subscription !== observable.__.query || fetchPolicy !== observable.__.fetchPolicy || errorPolicy !== observable.__.errorPolicy || !equal(variables, observable.__.variables)) && (typeof shouldResubscribe === \"function\" ? !!shouldResubscribe(options) : shouldResubscribe) !== false) {\n    setObservable(observable = recreate());\n  }\n  var optionsRef = React.useRef(options);\n  React.useEffect(function () {\n    optionsRef.current = options;\n  });\n  var fallbackLoading = !skip && !ignoreResults;\n  var fallbackResult = React.useMemo(function () {\n    return {\n      loading: fallbackLoading,\n      error: void 0,\n      data: void 0,\n      variables: variables\n    };\n  }, [fallbackLoading, variables]);\n  var ignoreResultsRef = React.useRef(ignoreResults);\n  useIsomorphicLayoutEffect(function () {\n    // We cannot reference `ignoreResults` directly in the effect below\n    // it would add a dependency to the `useEffect` deps array, which means the\n    // subscription would be recreated if `ignoreResults` changes\n    // As a result, on resubscription, the last result would be re-delivered,\n    // rendering the component one additional time, and re-triggering `onData`.\n    // The same applies to `fetchPolicy`, which results in a new `observable`\n    // being created. We cannot really avoid it in that case, but we can at least\n    // avoid it for `ignoreResults`.\n    ignoreResultsRef.current = ignoreResults;\n  });\n  var ret = useSyncExternalStore(React.useCallback(function (update) {\n    if (!observable) {\n      return function () {};\n    }\n    var subscriptionStopped = false;\n    var variables = observable.__.variables;\n    var client = observable.__.client;\n    var subscription = observable.subscribe({\n      next: function (fetchResult) {\n        var _a, _b;\n        if (subscriptionStopped) {\n          return;\n        }\n        var result = {\n          loading: false,\n          // TODO: fetchResult.data can be null but SubscriptionResult.data\n          // expects TData | undefined only\n          data: fetchResult.data,\n          error: toApolloError(fetchResult),\n          variables: variables\n        };\n        observable.__.setResult(result);\n        if (!ignoreResultsRef.current) update();\n        if (result.error) {\n          (_b = (_a = optionsRef.current).onError) === null || _b === void 0 ? void 0 : _b.call(_a, result.error);\n        } else if (optionsRef.current.onData) {\n          optionsRef.current.onData({\n            client: client,\n            data: result\n          });\n        } else if (optionsRef.current.onSubscriptionData) {\n          optionsRef.current.onSubscriptionData({\n            client: client,\n            subscriptionData: result\n          });\n        }\n      },\n      error: function (error) {\n        var _a, _b;\n        error = error instanceof ApolloError ? error : new ApolloError({\n          protocolErrors: [error]\n        });\n        if (!subscriptionStopped) {\n          observable.__.setResult({\n            loading: false,\n            data: void 0,\n            error: error,\n            variables: variables\n          });\n          if (!ignoreResultsRef.current) update();\n          (_b = (_a = optionsRef.current).onError) === null || _b === void 0 ? void 0 : _b.call(_a, error);\n        }\n      },\n      complete: function () {\n        if (!subscriptionStopped) {\n          if (optionsRef.current.onComplete) {\n            optionsRef.current.onComplete();\n          } else if (optionsRef.current.onSubscriptionComplete) {\n            optionsRef.current.onSubscriptionComplete();\n          }\n        }\n      }\n    });\n    return function () {\n      // immediately stop receiving subscription values, but do not unsubscribe\n      // until after a short delay in case another useSubscription hook is\n      // reusing the same underlying observable and is about to subscribe\n      subscriptionStopped = true;\n      setTimeout(function () {\n        subscription.unsubscribe();\n      });\n    };\n  }, [observable]), function () {\n    return observable && !skip && !ignoreResults ? observable.__.result : fallbackResult;\n  }, function () {\n    return fallbackResult;\n  });\n  var restart = React.useCallback(function () {\n    invariant(!optionsRef.current.skip, 65);\n    setObservable(recreateRef.current());\n  }, [optionsRef, recreateRef]);\n  return React.useMemo(function () {\n    return __assign(__assign({}, ret), {\n      restart: restart\n    });\n  }, [ret, restart]);\n}\nfunction createSubscription(client, query, variables, fetchPolicy, errorPolicy, context, extensions) {\n  var options = {\n    query: query,\n    variables: variables,\n    fetchPolicy: fetchPolicy,\n    errorPolicy: errorPolicy,\n    context: context,\n    extensions: extensions\n  };\n  var __ = __assign(__assign({}, options), {\n    client: client,\n    result: {\n      loading: true,\n      data: void 0,\n      error: void 0,\n      variables: variables\n    },\n    setResult: function (result) {\n      __.result = result;\n    }\n  });\n  var observable = null;\n  return Object.assign(new Observable(function (observer) {\n    // lazily start the subscription when the first observer subscribes\n    // to get around strict mode\n    if (!observable) {\n      observable = client.subscribe(options);\n    }\n    var sub = observable.subscribe(observer);\n    return function () {\n      return sub.unsubscribe();\n    };\n  }), {\n    /**\n     * A tracking object to store details about the observable and the latest result of the subscription.\n     */\n    __: __\n  });\n}\n//# sourceMappingURL=useSubscription.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}