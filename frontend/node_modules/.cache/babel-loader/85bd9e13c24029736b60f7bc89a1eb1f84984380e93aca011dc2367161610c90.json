{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n/**\n * Function parameters in this file try to follow a common order for the sake of\n * readability and consistency. The order is as follows:\n *\n * resultData\n * observable\n * client\n * query\n * options\n * watchQueryOptions\n * makeWatchQueryOptions\n * isSSRAllowed\n * disableNetworkFetches\n * partialRefetch\n * renderPromises\n * isSyncSSR\n * callbacks\n */\n/** */\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { equal } from \"@wry/equality\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { ObservableQuery, NetworkStatus } from \"../../core/index.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { compact, isNonEmptyArray, maybeDeepFreeze } from \"../../utilities/index.js\";\nimport { wrapHook } from \"./internal/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction noop() {}\nvar lastWatchOptions = Symbol();\n/**\n * A hook for executing queries in an Apollo application.\n *\n * To run a query within a React component, call `useQuery` and pass it a GraphQL query document.\n *\n * When your component renders, `useQuery` returns an object from Apollo Client that contains `loading`, `error`, and `data` properties you can use to render your UI.\n *\n * > Refer to the [Queries](https://www.apollographql.com/docs/react/data/queries) section for a more in-depth overview of `useQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useQuery } from '@apollo/client';\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const { loading, error, data } = useQuery(GET_GREETING, {\n *     variables: { language: 'english' },\n *   });\n *   if (loading) return <p>Loading ...</p>;\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Options to control how the query is executed.\n * @returns Query result object\n */\nexport function useQuery(query, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n  return wrapHook(\"useQuery\",\n  // eslint-disable-next-line react-compiler/react-compiler\n  useQuery_, useApolloClient(options && options.client))(query, options);\n}\nfunction useQuery_(query, options) {\n  var _a = useQueryInternals(query, options),\n    result = _a.result,\n    obsQueryFields = _a.obsQueryFields;\n  return React.useMemo(function () {\n    return __assign(__assign({}, result), obsQueryFields);\n  }, [result, obsQueryFields]);\n}\nfunction useInternalState(client, query, options, renderPromises, makeWatchQueryOptions) {\n  function createInternalState(previous) {\n    var _a;\n    verifyDocumentType(query, DocumentType.Query);\n    var internalState = {\n      client: client,\n      query: query,\n      observable:\n      // See if there is an existing observable that was used to fetch the same\n      // data and if so, use it instead since it will contain the proper queryId\n      // to fetch the result set. This is used during SSR.\n      renderPromises && renderPromises.getSSRObservable(makeWatchQueryOptions()) || ObservableQuery[\"inactiveOnCreation\"].withValue(!renderPromises, function () {\n        return client.watchQuery(getObsQueryOptions(void 0, client, options, makeWatchQueryOptions()));\n      }),\n      resultData: {\n        // Reuse previousData from previous InternalState (if any) to provide\n        // continuity of previousData even if/when the query or client changes.\n        previousData: (_a = previous === null || previous === void 0 ? void 0 : previous.resultData.current) === null || _a === void 0 ? void 0 : _a.data\n      }\n    };\n    return internalState;\n  }\n  var _a = React.useState(createInternalState),\n    internalState = _a[0],\n    updateInternalState = _a[1];\n  /**\n   * Used by `useLazyQuery` when a new query is executed.\n   * We keep this logic here since it needs to update things in unsafe\n   * ways and here we at least can keep track of that in a single place.\n   */\n  function onQueryExecuted(watchQueryOptions) {\n    var _a;\n    var _b;\n    // this needs to be set to prevent an immediate `resubscribe` in the\n    // next rerender of the `useQuery` internals\n    Object.assign(internalState.observable, (_a = {}, _a[lastWatchOptions] = watchQueryOptions, _a));\n    var resultData = internalState.resultData;\n    updateInternalState(__assign(__assign({}, internalState), {\n      // might be a different query\n      query: watchQueryOptions.query,\n      resultData: Object.assign(resultData, {\n        // We need to modify the previous `resultData` object as we rely on the\n        // object reference in other places\n        previousData: ((_b = resultData.current) === null || _b === void 0 ? void 0 : _b.data) || resultData.previousData,\n        current: undefined\n      })\n    }));\n  }\n  if (client !== internalState.client || query !== internalState.query) {\n    // If the client or query have changed, we need to create a new InternalState.\n    // This will trigger a re-render with the new state, but it will also continue\n    // to run the current render function to completion.\n    // Since we sometimes trigger some side-effects in the render function, we\n    // re-assign `state` to the new state to ensure that those side-effects are\n    // triggered with the new state.\n    var newInternalState = createInternalState(internalState);\n    updateInternalState(newInternalState);\n    return [newInternalState, onQueryExecuted];\n  }\n  return [internalState, onQueryExecuted];\n}\nexport function useQueryInternals(query, options) {\n  var client = useApolloClient(options.client);\n  var renderPromises = React.useContext(getApolloContext()).renderPromises;\n  var isSyncSSR = !!renderPromises;\n  var disableNetworkFetches = client.disableNetworkFetches;\n  var ssrAllowed = options.ssr !== false && !options.skip;\n  var partialRefetch = options.partialRefetch;\n  var makeWatchQueryOptions = createMakeWatchQueryOptions(client, query, options, isSyncSSR);\n  var _a = useInternalState(client, query, options, renderPromises, makeWatchQueryOptions),\n    _b = _a[0],\n    observable = _b.observable,\n    resultData = _b.resultData,\n    onQueryExecuted = _a[1];\n  var watchQueryOptions = makeWatchQueryOptions(observable);\n  useResubscribeIfNecessary(resultData,\n  // might get mutated during render\n  observable,\n  // might get mutated during render\n  client, options, watchQueryOptions);\n  var obsQueryFields = React.useMemo(function () {\n    return bindObservableMethods(observable);\n  }, [observable]);\n  useRegisterSSRObservable(observable, renderPromises, ssrAllowed);\n  var result = useObservableSubscriptionResult(resultData, observable, client, options, watchQueryOptions, disableNetworkFetches, partialRefetch, isSyncSSR, {\n    onCompleted: options.onCompleted || noop,\n    onError: options.onError || noop\n  });\n  return {\n    result: result,\n    obsQueryFields: obsQueryFields,\n    observable: observable,\n    resultData: resultData,\n    client: client,\n    onQueryExecuted: onQueryExecuted\n  };\n}\nfunction useObservableSubscriptionResult(resultData, observable, client, options, watchQueryOptions, disableNetworkFetches, partialRefetch, isSyncSSR, callbacks) {\n  var callbackRef = React.useRef(callbacks);\n  React.useEffect(function () {\n    // Make sure state.onCompleted and state.onError always reflect the latest\n    // options.onCompleted and options.onError callbacks provided to useQuery,\n    // since those functions are often recreated every time useQuery is called.\n    // Like the forceUpdate method, the versions of these methods inherited from\n    // InternalState.prototype are empty no-ops, but we can override them on the\n    // base state object (without modifying the prototype).\n    // eslint-disable-next-line react-compiler/react-compiler\n    callbackRef.current = callbacks;\n  });\n  var resultOverride = (isSyncSSR || disableNetworkFetches) && options.ssr === false && !options.skip ?\n  // If SSR has been explicitly disabled, and this function has been called\n  // on the server side, return the default loading state.\n  ssrDisabledResult : options.skip || watchQueryOptions.fetchPolicy === \"standby\" ?\n  // When skipping a query (ie. we're not querying for data but still want to\n  // render children), make sure the `data` is cleared out and `loading` is\n  // set to `false` (since we aren't loading anything).\n  //\n  // NOTE: We no longer think this is the correct behavior. Skipping should\n  // not automatically set `data` to `undefined`, but instead leave the\n  // previous data in place. In other words, skipping should not mandate that\n  // previously received data is all of a sudden removed. Unfortunately,\n  // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n  // to address this.\n  skipStandbyResult : void 0;\n  var previousData = resultData.previousData;\n  var currentResultOverride = React.useMemo(function () {\n    return resultOverride && toQueryResult(resultOverride, previousData, observable, client);\n  }, [client, observable, resultOverride, previousData]);\n  return useSyncExternalStore(React.useCallback(function (handleStoreChange) {\n    // reference `disableNetworkFetches` here to ensure that the rules of hooks\n    // keep it as a dependency of this effect, even though it's not used\n    disableNetworkFetches;\n    if (isSyncSSR) {\n      return function () {};\n    }\n    var onNext = function () {\n      var previousResult = resultData.current;\n      // We use `getCurrentResult()` instead of the onNext argument because\n      // the values differ slightly. Specifically, loading results will have\n      // an empty object for data instead of `undefined` for some reason.\n      var result = observable.getCurrentResult();\n      // Make sure we're not attempting to re-render similar results\n      if (previousResult && previousResult.loading === result.loading && previousResult.networkStatus === result.networkStatus && equal(previousResult.data, result.data)) {\n        return;\n      }\n      setResult(result, resultData, observable, client, partialRefetch, handleStoreChange, callbackRef.current);\n    };\n    var onError = function (error) {\n      subscription.current.unsubscribe();\n      subscription.current = observable.resubscribeAfterError(onNext, onError);\n      if (!hasOwnProperty.call(error, \"graphQLErrors\")) {\n        // The error is not a GraphQL error\n        throw error;\n      }\n      var previousResult = resultData.current;\n      if (!previousResult || previousResult && previousResult.loading || !equal(error, previousResult.error)) {\n        setResult({\n          data: previousResult && previousResult.data,\n          error: error,\n          loading: false,\n          networkStatus: NetworkStatus.error\n        }, resultData, observable, client, partialRefetch, handleStoreChange, callbackRef.current);\n      }\n    };\n    // TODO evaluate if we keep this in\n    // React Compiler cannot handle scoped `let` access, but a mutable object\n    // like this is fine.\n    // was:\n    // let subscription = observable.subscribe(onNext, onError);\n    var subscription = {\n      current: observable.subscribe(onNext, onError)\n    };\n    // Do the \"unsubscribe\" with a short delay.\n    // This way, an existing subscription can be reused without an additional\n    // request if \"unsubscribe\"  and \"resubscribe\" to the same ObservableQuery\n    // happen in very fast succession.\n    return function () {\n      setTimeout(function () {\n        return subscription.current.unsubscribe();\n      });\n    };\n  }, [disableNetworkFetches, isSyncSSR, observable, resultData, partialRefetch, client]), function () {\n    return currentResultOverride || getCurrentResult(resultData, observable, callbackRef.current, partialRefetch, client);\n  }, function () {\n    return currentResultOverride || getCurrentResult(resultData, observable, callbackRef.current, partialRefetch, client);\n  });\n}\nfunction useRegisterSSRObservable(observable, renderPromises, ssrAllowed) {\n  if (renderPromises && ssrAllowed) {\n    renderPromises.registerSSRObservable(observable);\n    if (observable.getCurrentResult().loading) {\n      // TODO: This is a legacy API which could probably be cleaned up\n      renderPromises.addObservableQueryPromise(observable);\n    }\n  }\n}\n// this hook is not compatible with any rules of React, and there's no good way to rewrite it.\n// it should stay a separate hook that will not be optimized by the compiler\nfunction useResubscribeIfNecessary(/** this hook will mutate properties on `resultData` */\nresultData, /** this hook will mutate properties on `observable` */\nobservable, client, options, watchQueryOptions) {\n  var _a;\n  if (observable[lastWatchOptions] && !equal(observable[lastWatchOptions], watchQueryOptions)) {\n    // Though it might be tempting to postpone this reobserve call to the\n    // useEffect block, we need getCurrentResult to return an appropriate\n    // loading:true result synchronously (later within the same call to\n    // useQuery). Since we already have this.observable here (not true for\n    // the very first call to useQuery), we are not initiating any new\n    // subscriptions, though it does feel less than ideal that reobserve\n    // (potentially) kicks off a network request (for example, when the\n    // variables have changed), which is technically a side-effect.\n    observable.reobserve(getObsQueryOptions(observable, client, options, watchQueryOptions));\n    // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n    // but save the current data as this.previousData, just like setResult\n    // usually does.\n    resultData.previousData = ((_a = resultData.current) === null || _a === void 0 ? void 0 : _a.data) || resultData.previousData;\n    resultData.current = void 0;\n  }\n  observable[lastWatchOptions] = watchQueryOptions;\n}\n/*\n * A function to massage options before passing them to ObservableQuery.\n * This is two-step curried because we want to reuse the `make` function,\n * but the `observable` might differ between calls to `make`.\n */\nexport function createMakeWatchQueryOptions(client, query, _a, isSyncSSR) {\n  if (_a === void 0) {\n    _a = {};\n  }\n  var skip = _a.skip,\n    ssr = _a.ssr,\n    onCompleted = _a.onCompleted,\n    onError = _a.onError,\n    defaultOptions = _a.defaultOptions,\n    // The above options are useQuery-specific, so this ...otherOptions spread\n    // makes otherOptions almost a WatchQueryOptions object, except for the\n    // query property that we add below.\n    otherOptions = __rest(_a, [\"skip\", \"ssr\", \"onCompleted\", \"onError\", \"defaultOptions\"]);\n  return function (observable) {\n    // This Object.assign is safe because otherOptions is a fresh ...rest object\n    // that did not exist until just now, so modifications are still allowed.\n    var watchQueryOptions = Object.assign(otherOptions, {\n      query: query\n    });\n    if (isSyncSSR && (watchQueryOptions.fetchPolicy === \"network-only\" || watchQueryOptions.fetchPolicy === \"cache-and-network\")) {\n      // this behavior was added to react-apollo without explanation in this PR\n      // https://github.com/apollographql/react-apollo/pull/1579\n      watchQueryOptions.fetchPolicy = \"cache-first\";\n    }\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {};\n    }\n    if (skip) {\n      // When skipping, we set watchQueryOptions.fetchPolicy initially to\n      // \"standby\", but we also need/want to preserve the initial non-standby\n      // fetchPolicy that would have been used if not skipping.\n      watchQueryOptions.initialFetchPolicy = watchQueryOptions.initialFetchPolicy || watchQueryOptions.fetchPolicy || getDefaultFetchPolicy(defaultOptions, client.defaultOptions);\n      watchQueryOptions.fetchPolicy = \"standby\";\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy = (observable === null || observable === void 0 ? void 0 : observable.options.initialFetchPolicy) || getDefaultFetchPolicy(defaultOptions, client.defaultOptions);\n    }\n    return watchQueryOptions;\n  };\n}\nexport function getObsQueryOptions(observable, client, queryHookOptions, watchQueryOptions) {\n  var toMerge = [];\n  var globalDefaults = client.defaultOptions.watchQuery;\n  if (globalDefaults) toMerge.push(globalDefaults);\n  if (queryHookOptions.defaultOptions) {\n    toMerge.push(queryHookOptions.defaultOptions);\n  }\n  // We use compact rather than mergeOptions for this part of the merge,\n  // because we want watchQueryOptions.variables (if defined) to replace\n  // this.observable.options.variables whole. This replacement allows\n  // removing variables by removing them from the variables input to\n  // useQuery. If the variables were always merged together (rather than\n  // replaced), there would be no way to remove existing variables.\n  // However, the variables from options.defaultOptions and globalDefaults\n  // (if provided) should be merged, to ensure individual defaulted\n  // variables always have values, if not otherwise defined in\n  // observable.options or watchQueryOptions.\n  toMerge.push(compact(observable && observable.options, watchQueryOptions));\n  return toMerge.reduce(mergeOptions);\n}\nfunction setResult(nextResult, resultData, observable, client, partialRefetch, forceUpdate, callbacks) {\n  var previousResult = resultData.current;\n  if (previousResult && previousResult.data) {\n    resultData.previousData = previousResult.data;\n  }\n  if (!nextResult.error && isNonEmptyArray(nextResult.errors)) {\n    // Until a set naming convention for networkError and graphQLErrors is\n    // decided upon, we map errors (graphQLErrors) to the error options.\n    // TODO: Is it possible for both result.error and result.errors to be\n    // defined here?\n    nextResult.error = new ApolloError({\n      graphQLErrors: nextResult.errors\n    });\n  }\n  resultData.current = toQueryResult(unsafeHandlePartialRefetch(nextResult, observable, partialRefetch), resultData.previousData, observable, client);\n  // Calling state.setResult always triggers an update, though some call sites\n  // perform additional equality checks before committing to an update.\n  forceUpdate();\n  handleErrorOrCompleted(nextResult, previousResult === null || previousResult === void 0 ? void 0 : previousResult.networkStatus, callbacks);\n}\nfunction handleErrorOrCompleted(result, previousNetworkStatus, callbacks) {\n  if (!result.loading) {\n    var error_1 = toApolloError(result);\n    // wait a tick in case we are in the middle of rendering a component\n    Promise.resolve().then(function () {\n      if (error_1) {\n        callbacks.onError(error_1);\n      } else if (result.data && previousNetworkStatus !== result.networkStatus && result.networkStatus === NetworkStatus.ready) {\n        callbacks.onCompleted(result.data);\n      }\n    }).catch(function (error) {\n      globalThis.__DEV__ !== false && invariant.warn(error);\n    });\n  }\n}\nfunction getCurrentResult(resultData, observable, callbacks, partialRefetch, client) {\n  // Using this.result as a cache ensures getCurrentResult continues returning\n  // the same (===) result object, unless state.setResult has been called, or\n  // we're doing server rendering and therefore override the result below.\n  if (!resultData.current) {\n    // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n    // this could call unsafeHandlePartialRefetch\n    setResult(observable.getCurrentResult(), resultData, observable, client, partialRefetch, function () {}, callbacks);\n  }\n  return resultData.current;\n}\nexport function getDefaultFetchPolicy(queryHookDefaultOptions, clientDefaultOptions) {\n  var _a;\n  return (queryHookDefaultOptions === null || queryHookDefaultOptions === void 0 ? void 0 : queryHookDefaultOptions.fetchPolicy) || ((_a = clientDefaultOptions === null || clientDefaultOptions === void 0 ? void 0 : clientDefaultOptions.watchQuery) === null || _a === void 0 ? void 0 : _a.fetchPolicy) || \"cache-first\";\n}\nexport function toApolloError(result) {\n  return isNonEmptyArray(result.errors) ? new ApolloError({\n    graphQLErrors: result.errors\n  }) : result.error;\n}\nexport function toQueryResult(result, previousData, observable, client) {\n  var data = result.data,\n    partial = result.partial,\n    resultWithoutPartial = __rest(result, [\"data\", \"partial\"]);\n  var queryResult = __assign(__assign({\n    data: data\n  }, resultWithoutPartial), {\n    client: client,\n    observable: observable,\n    variables: observable.variables,\n    called: result !== ssrDisabledResult && result !== skipStandbyResult,\n    previousData: previousData\n  });\n  return queryResult;\n}\nfunction unsafeHandlePartialRefetch(result, observable, partialRefetch) {\n  // TODO: This code should be removed when the partialRefetch option is\n  // removed. I was unable to get this hook to behave reasonably in certain\n  // edge cases when this block was put in an effect.\n  if (result.partial && partialRefetch && !result.loading && (!result.data || Object.keys(result.data).length === 0) && observable.options.fetchPolicy !== \"cache-only\") {\n    observable.refetch();\n    return __assign(__assign({}, result), {\n      loading: true,\n      networkStatus: NetworkStatus.refetch\n    });\n  }\n  return result;\n}\nvar ssrDisabledResult = maybeDeepFreeze({\n  loading: true,\n  data: void 0,\n  error: void 0,\n  networkStatus: NetworkStatus.loading\n});\nvar skipStandbyResult = maybeDeepFreeze({\n  loading: false,\n  data: void 0,\n  error: void 0,\n  networkStatus: NetworkStatus.ready\n});\nfunction bindObservableMethods(observable) {\n  return {\n    refetch: observable.refetch.bind(observable),\n    reobserve: observable.reobserve.bind(observable),\n    fetchMore: observable.fetchMore.bind(observable),\n    updateQuery: observable.updateQuery.bind(observable),\n    startPolling: observable.startPolling.bind(observable),\n    stopPolling: observable.stopPolling.bind(observable),\n    subscribeToMore: observable.subscribeToMore.bind(observable)\n  };\n}\n//# sourceMappingURL=useQuery.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}