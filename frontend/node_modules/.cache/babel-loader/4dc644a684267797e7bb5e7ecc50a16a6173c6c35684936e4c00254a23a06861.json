{"ast":null,"code":"const express = require('express');\nconst {\n  ApolloServer\n} = require('@apollo/server');\nconst {\n  expressMiddleware\n} = require('@apollo/server/express4');\nconst {\n  buildSubgraphSchema\n} = require('@apollo/subgraph');\nconst {\n  gql\n} = require('graphql-tag');\nconst mysql = require('mysql2/promise');\nconst cors = require('cors');\nconst fetch = require('node-fetch');\n\n// HARDCODED URLs for debugging - TEMPORARY FIX\nconst PRODUCT_SERVICE_URL = 'http://localhost:4002';\nconst INVENTORY_SERVICE_URL = 'http://localhost:4004';\nconst DELIVERY_SERVICE_URL = 'http://localhost:4005';\nconsole.log('🔧 HARDCODED Service URLs:');\nconsole.log('  PRODUCT_SERVICE_URL:', PRODUCT_SERVICE_URL);\nconsole.log('  INVENTORY_SERVICE_URL:', INVENTORY_SERVICE_URL);\nconsole.log('  DELIVERY_SERVICE_URL:', DELIVERY_SERVICE_URL);\n\n// Database connection\nlet db;\nconst connectDB = async (maxRetries = 10, retryInterval = 5000) => {\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      console.log(`Attempting to connect to database... (${i + 1}/${maxRetries})`);\n      db = await mysql.createConnection({\n        host: 'localhost',\n        user: 'root',\n        password: '',\n        database: 'ecommerce_order',\n        connectTimeout: 60000\n      });\n      await db.ping();\n      console.log('✅ Database connected successfully!');\n      return;\n    } catch (error) {\n      console.log(`❌ Database connection failed (${i + 1}/${maxRetries}):`, error.message);\n      if (i === maxRetries - 1) {\n        throw error;\n      }\n      console.log(`⏳ Retrying in ${retryInterval / 1000} seconds...`);\n      await new Promise(resolve => setTimeout(resolve, retryInterval));\n    }\n  }\n};\n\n// Simple service call function\nconst callService = async (url, query, variables = {}) => {\n  try {\n    console.log('🔗 Calling service URL:', url);\n    console.log('📝 Query:', query.substring(0, 100) + '...');\n    console.log('📊 Variables:', variables);\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        query,\n        variables\n      })\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`HTTP ${response.status}: ${errorText}`);\n    }\n    const result = await response.json();\n    if (result.errors) {\n      throw new Error(`GraphQL: ${result.errors[0].message}`);\n    }\n    console.log('✅ Service call successful');\n    return result.data;\n  } catch (error) {\n    console.error('❌ Service call failed:', error.message);\n    throw error;\n  }\n};\n\n// REST API call function for delivery service\nconst callDeliveryRestAPI = async (endpoint, data) => {\n  try {\n    const url = `${DELIVERY_SERVICE_URL}/api/${endpoint}`;\n    console.log('🚚 Calling delivery API:', url);\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`HTTP ${response.status}: ${errorText}`);\n    }\n    const result = await response.json();\n    console.log('✅ Delivery API call successful');\n    return result;\n  } catch (error) {\n    console.error('❌ Delivery API call failed:', error.message);\n    throw error;\n  }\n};\n\n// REST API call function for product service stock update\nconst callProductRestAPI = async (endpoint, data) => {\n  try {\n    const url = `${PRODUCT_SERVICE_URL}/api/${endpoint}`;\n    console.log('📦 Calling product API:', url);\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`HTTP ${response.status}: ${errorText}`);\n    }\n    const result = await response.json();\n    console.log('✅ Product API call successful');\n    return result;\n  } catch (error) {\n    console.error('❌ Product API call failed:', error.message);\n    throw error;\n  }\n};\n\n// GraphQL Schema - FIXED parameter types to match frontend\nconst typeDefs = gql`\n  extend type Query {\n    orders: [Order!]!\n    order(id: ID!): Order\n    myOrders: [Order!]!\n    myCart: [CartItem!]!\n  }\n\n  extend type Mutation {\n    addToCart(product_id: ID!, quantity: Int!): CartItem!\n    removeFromCart(product_id: ID!): Boolean!\n    updateCartItem(product_id: ID!, quantity: Int!): CartItem!\n    clearCart: Boolean!\n    createOrder(shipping_address: String!, payment_method: String!): Order!\n    updateOrderStatus(id: ID!, status: String!): Order!\n    cancelOrder(id: ID!): Order!\n  }\n\n  type Order @key(fields: \"id\") {\n    id: ID!\n    user_id: ID!\n    total_amount: Float!\n    status: String!\n    shipping_address: String!\n    payment_method: String\n    created_at: String!\n    updated_at: String!\n    items: [OrderItem!]!\n    user: User\n    tracking: DeliveryTracking\n  }\n\n  type OrderItem {\n    id: ID!\n    order_id: ID!\n    product_id: ID!\n    quantity: Int!\n    price: Float!\n    product: Product\n  }\n\n  type CartItem {\n    id: ID!\n    user_id: ID!\n    product_id: ID!\n    quantity: Int!\n    created_at: String!\n    product: Product\n  }\n\n  type DeliveryTracking {\n    service_id: String!\n    status: String!\n    estimated_delivery: String\n    actual_delivery: String\n    tracking_notes: String\n  }\n\n  extend type User @key(fields: \"id\") {\n    id: ID! @external\n    orders: [Order!]!\n    cart: [CartItem!]!\n  }\n\n  extend type Product @key(fields: \"id\") {\n    id: ID! @external\n  }\n`;\nconst resolvers = {\n  Query: {\n    orders: async (_, __, {\n      user\n    }) => {\n      if (!user || user.role !== 'admin') throw new Error('Admin access required');\n      const [rows] = await db.execute('SELECT * FROM orders ORDER BY created_at DESC');\n      return rows;\n    },\n    order: async (_, {\n      id\n    }, {\n      user\n    }) => {\n      if (!user) throw new Error('Authentication required');\n      let query = 'SELECT * FROM orders WHERE id = ?';\n      const params = [id];\n      if (user.role !== 'admin') {\n        query += ' AND user_id = ?';\n        params.push(user.id);\n      }\n      const [rows] = await db.execute(query, params);\n      return rows[0];\n    },\n    myOrders: async (_, __, {\n      user\n    }) => {\n      if (!user) throw new Error('Authentication required');\n      const [rows] = await db.execute('SELECT * FROM orders WHERE user_id = ? ORDER BY created_at DESC', [user.id]);\n      return rows;\n    },\n    myCart: async (_, __, {\n      user\n    }) => {\n      if (!user) throw new Error('Authentication required');\n      const [rows] = await db.execute('SELECT * FROM cart WHERE user_id = ? ORDER BY created_at DESC', [user.id]);\n      return rows;\n    }\n  },\n  Mutation: {\n    addToCart: async (_, {\n      product_id,\n      quantity\n    }, {\n      user\n    }) => {\n      if (!user) throw new Error('Authentication required');\n      console.log(`🛒 Adding to cart: product_id=${product_id} (${typeof product_id}), quantity=${quantity}, user=${user.id}`);\n\n      // Convert product_id to integer for database operations\n      const productIdInt = parseInt(product_id);\n      if (isNaN(productIdInt)) {\n        throw new Error('Invalid product ID');\n      }\n\n      // Build the full URL for product service\n      const productServiceUrl = `${PRODUCT_SERVICE_URL}/graphql`;\n      console.log('🔗 Product service URL:', productServiceUrl);\n\n      // Verify product exists and has sufficient stock\n      const productData = await callService(productServiceUrl, `query GetProduct($id: ID!) { \n          product(id: $id) { \n            id \n            name\n            price\n            stock \n          } \n        }`, {\n        id: product_id\n      } // Use original string ID for GraphQL\n      );\n      if (!(productData !== null && productData !== void 0 && productData.product)) {\n        throw new Error('Product not found');\n      }\n      if (productData.product.stock < quantity) {\n        throw new Error(`Insufficient stock available. Only ${productData.product.stock} items left.`);\n      }\n\n      // Check current cart quantity for this product\n      const [existingCart] = await db.execute('SELECT quantity FROM cart WHERE user_id = ? AND product_id = ?', [user.id, productIdInt]);\n      const currentCartQuantity = existingCart.length > 0 ? existingCart[0].quantity : 0;\n      const totalRequestedQuantity = currentCartQuantity + quantity;\n      if (totalRequestedQuantity > productData.product.stock) {\n        throw new Error(`Cannot add ${quantity} items. You already have ${currentCartQuantity} in cart and only ${productData.product.stock} items available.`);\n      }\n\n      // Add to cart or update existing item\n      await db.execute(`INSERT INTO cart (user_id, product_id, quantity) \n         VALUES (?, ?, ?) \n         ON DUPLICATE KEY UPDATE quantity = quantity + ?`, [user.id, productIdInt, quantity, quantity]);\n      const [rows] = await db.execute('SELECT * FROM cart WHERE user_id = ? AND product_id = ?', [user.id, productIdInt]);\n      console.log('✅ Successfully added to cart');\n      return rows[0];\n    },\n    createOrder: async (_, {\n      shipping_address,\n      payment_method\n    }, {\n      user\n    }) => {\n      if (!user) throw new Error('Authentication required');\n      if (user.role !== 'customer') throw new Error('Only customers can place orders');\n      console.log(`📦 Creating order for user ${user.id}`);\n\n      // Get cart items\n      const [cartItems] = await db.execute('SELECT * FROM cart WHERE user_id = ?', [user.id]);\n      if (cartItems.length === 0) {\n        throw new Error('Cart is empty');\n      }\n      console.log(`📝 Found ${cartItems.length} items in cart`);\n\n      // Validate products and calculate total\n      let total = 0;\n      const orderItems = [];\n      const productServiceUrl = `${PRODUCT_SERVICE_URL}/graphql`;\n      for (const item of cartItems) {\n        console.log(`🔍 Validating product ${item.product_id}`);\n        const productData = await callService(productServiceUrl, `query GetProduct($id: ID!) { \n            product(id: $id) { \n              id \n              name\n              price \n              stock \n            } \n          }`, {\n          id: String(item.product_id)\n        } // Convert to string for GraphQL\n        );\n        if (!(productData !== null && productData !== void 0 && productData.product)) {\n          throw new Error(`Product ${item.product_id} not found`);\n        }\n        if (productData.product.stock < item.quantity) {\n          throw new Error(`Insufficient stock for product ${productData.product.name}. Available: ${productData.product.stock}, Requested: ${item.quantity}`);\n        }\n        const itemTotal = productData.product.price * item.quantity;\n        total += itemTotal;\n        orderItems.push({\n          product_id: item.product_id,\n          quantity: item.quantity,\n          price: productData.product.price\n        });\n      }\n      console.log(`💰 Order total: $${total}`);\n\n      // Create order\n      const [orderResult] = await db.execute('INSERT INTO orders (user_id, total_amount, shipping_address, payment_method) VALUES (?, ?, ?, ?)', [user.id, total, shipping_address, payment_method]);\n      const orderId = orderResult.insertId;\n      console.log(`📄 Created order ${orderId}`);\n\n      // Create order items\n      for (const item of orderItems) {\n        await db.execute('INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)', [orderId, item.product_id, item.quantity, item.price]);\n      }\n\n      // Update product stock for each item using REST API\n      console.log('📦 Updating product stock...');\n      for (const item of orderItems) {\n        try {\n          await callProductRestAPI('update-stock', {\n            product_id: item.product_id,\n            stock_change: -item.quantity // Negative value to reduce stock\n          });\n          console.log(`✅ Updated stock for product ${item.product_id}: -${item.quantity}`);\n        } catch (error) {\n          console.error(`❌ Failed to update stock for product ${item.product_id}:`, error.message);\n          // Continue with other products, don't fail the entire order\n        }\n      }\n\n      // Create delivery tracking automatically\n      console.log('🚚 Creating delivery tracking...');\n      try {\n        const trackingResult = await callDeliveryRestAPI('create-tracking', {\n          order_id: orderId,\n          estimated_delivery: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString() // 7 days from now\n        });\n        if (trackingResult.success) {\n          console.log(`✅ Created delivery tracking: ${trackingResult.tracking.service_id}`);\n        }\n      } catch (error) {\n        console.error('❌ Failed to create delivery tracking:', error.message);\n        // Don't fail the order if tracking creation fails\n      }\n\n      // Clear cart\n      await db.execute('DELETE FROM cart WHERE user_id = ?', [user.id]);\n      console.log('🧹 Cart cleared');\n\n      // Return created order\n      const [rows] = await db.execute('SELECT * FROM orders WHERE id = ?', [orderId]);\n      console.log('✅ Order created successfully');\n      return rows[0];\n    },\n    updateOrderStatus: async (_, {\n      id,\n      status\n    }, {\n      user\n    }) => {\n      if (!user || user.role !== 'admin') throw new Error('Admin access required');\n\n      // Valid status values\n      const validStatuses = ['pending', 'processing', 'shipped', 'delivered', 'cancelled'];\n      if (!validStatuses.includes(status)) {\n        throw new Error(`Invalid status. Must be one of: ${validStatuses.join(', ')}`);\n      }\n      await db.execute('UPDATE orders SET status = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?', [status, id]);\n      const [rows] = await db.execute('SELECT * FROM orders WHERE id = ?', [id]);\n      if (rows.length === 0) {\n        throw new Error('Order not found');\n      }\n      return rows[0];\n    },\n    removeFromCart: async (_, {\n      product_id\n    }, {\n      user\n    }) => {\n      if (!user) throw new Error('Authentication required');\n      const productIdInt = parseInt(product_id);\n      if (isNaN(productIdInt)) {\n        throw new Error('Invalid product ID');\n      }\n      await db.execute('DELETE FROM cart WHERE user_id = ? AND product_id = ?', [user.id, productIdInt]);\n      return true;\n    },\n    updateCartItem: async (_, {\n      product_id,\n      quantity\n    }, {\n      user\n    }) => {\n      if (!user) throw new Error('Authentication required');\n      const productIdInt = parseInt(product_id);\n      if (isNaN(productIdInt)) {\n        throw new Error('Invalid product ID');\n      }\n      if (quantity <= 0) {\n        // Remove item if quantity is 0 or negative\n        await db.execute('DELETE FROM cart WHERE user_id = ? AND product_id = ?', [user.id, productIdInt]);\n        return null;\n      }\n\n      // Verify product exists and has sufficient stock\n      const productServiceUrl = `${PRODUCT_SERVICE_URL}/graphql`;\n      const productData = await callService(productServiceUrl, `query GetProduct($id: ID!) { \n          product(id: $id) { \n            id \n            stock \n          } \n        }`, {\n        id: product_id\n      });\n      if (!(productData !== null && productData !== void 0 && productData.product)) {\n        throw new Error('Product not found');\n      }\n      if (productData.product.stock < quantity) {\n        throw new Error(`Insufficient stock available. Only ${productData.product.stock} items in stock.`);\n      }\n      await db.execute('UPDATE cart SET quantity = ? WHERE user_id = ? AND product_id = ?', [quantity, user.id, productIdInt]);\n      const [rows] = await db.execute('SELECT * FROM cart WHERE user_id = ? AND product_id = ?', [user.id, productIdInt]);\n      return rows[0];\n    },\n    clearCart: async (_, __, {\n      user\n    }) => {\n      if (!user) throw new Error('Authentication required');\n      await db.execute('DELETE FROM cart WHERE user_id = ?', [user.id]);\n      return true;\n    },\n    cancelOrder: async (_, {\n      id\n    }, {\n      user\n    }) => {\n      if (!user) throw new Error('Authentication required');\n      const orderIdInt = parseInt(id);\n      if (isNaN(orderIdInt)) {\n        throw new Error('Invalid order ID');\n      }\n\n      // Check if user owns the order (customers) or is admin\n      let query = 'SELECT * FROM orders WHERE id = ?';\n      const params = [orderIdInt];\n      if (user.role !== 'admin') {\n        query += ' AND user_id = ?';\n        params.push(user.id);\n      }\n      const [orderRows] = await db.execute(query, params);\n      if (orderRows.length === 0) {\n        throw new Error('Order not found or access denied');\n      }\n      const order = orderRows[0];\n      if (order.status === 'delivered') {\n        throw new Error('Cannot cancel delivered order');\n      }\n      if (order.status === 'cancelled') {\n        throw new Error('Order is already cancelled');\n      }\n\n      // Update order status to cancelled\n      await db.execute('UPDATE orders SET status = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?', ['cancelled', orderIdInt]);\n\n      // Restore stock for cancelled orders\n      const [orderItems] = await db.execute('SELECT * FROM order_items WHERE order_id = ?', [orderIdInt]);\n      for (const item of orderItems) {\n        try {\n          await callProductRestAPI('update-stock', {\n            product_id: item.product_id,\n            stock_change: item.quantity // Positive value to restore stock\n          });\n          console.log(`✅ Restored stock for product ${item.product_id}: +${item.quantity}`);\n        } catch (error) {\n          console.error(`❌ Failed to restore stock for product ${item.product_id}:`, error.message);\n        }\n      }\n      const [rows] = await db.execute('SELECT * FROM orders WHERE id = ?', [orderIdInt]);\n      return rows[0];\n    }\n  },\n  Order: {\n    __resolveReference: async order => {\n      const [rows] = await db.execute('SELECT * FROM orders WHERE id = ?', [order.id]);\n      return rows[0];\n    },\n    items: async order => {\n      const [rows] = await db.execute('SELECT * FROM order_items WHERE order_id = ?', [order.id]);\n      return rows;\n    },\n    user: async order => {\n      return {\n        id: order.user_id\n      };\n    },\n    tracking: async order => {\n      try {\n        // Call delivery service to get tracking info by looking for TRK + order.id pattern\n        const trackingData = await callService(`${DELIVERY_SERVICE_URL}/graphql`, `query TrackByOrderId($order_id: String!) {\n            trackByOrderId(order_id: $order_id) {\n              service_id\n              status\n              estimated_delivery\n              actual_delivery\n              tracking_notes\n            }\n          }`, {\n          order_id: String(order.id)\n        });\n        return (trackingData === null || trackingData === void 0 ? void 0 : trackingData.trackByOrderId) || null;\n      } catch (error) {\n        console.error('Error fetching tracking info:', error.message);\n        return null;\n      }\n    }\n  },\n  OrderItem: {\n    product: async orderItem => {\n      return {\n        id: String(orderItem.product_id)\n      };\n    }\n  },\n  CartItem: {\n    product: async cartItem => {\n      return {\n        id: String(cartItem.product_id)\n      };\n    }\n  },\n  User: {\n    orders: async user => {\n      const [rows] = await db.execute('SELECT * FROM orders WHERE user_id = ? ORDER BY created_at DESC', [user.id]);\n      return rows;\n    },\n    cart: async user => {\n      const [rows] = await db.execute('SELECT * FROM cart WHERE user_id = ? ORDER BY created_at DESC', [user.id]);\n      return rows;\n    }\n  }\n};\n\n// Helper function to get user from headers\nconst getUserFromHeaders = req => {\n  const userHeader = req.headers.user;\n  return userHeader ? JSON.parse(userHeader) : null;\n};\nasync function startServer() {\n  await connectDB();\n  const server = new ApolloServer({\n    schema: buildSubgraphSchema([{\n      typeDefs,\n      resolvers\n    }])\n  });\n  await server.start();\n  const app = express();\n  app.use(cors());\n  app.use(express.json());\n\n  // Health check endpoint\n  app.get('/health', async (req, res) => {\n    try {\n      await db.ping();\n      res.json({\n        status: 'OK',\n        service: 'order-service',\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('Health check failed:', error);\n      res.status(500).json({\n        status: 'ERROR',\n        service: 'order-service',\n        error: error.message\n      });\n    }\n  });\n  app.use('/graphql', expressMiddleware(server, {\n    context: async ({\n      req\n    }) => {\n      const user = getUserFromHeaders(req);\n      return {\n        user\n      };\n    }\n  }));\n  const PORT = 4003;\n  app.listen(PORT, () => {\n    console.log(`🚀 Order service ready at http://localhost:${PORT}/graphql`);\n    console.log(`🏥 Health check available at http://localhost:${PORT}/health`);\n  });\n}\nstartServer().catch(console.error);","map":{"version":3,"names":["express","require","ApolloServer","expressMiddleware","buildSubgraphSchema","gql","mysql","cors","fetch","PRODUCT_SERVICE_URL","INVENTORY_SERVICE_URL","DELIVERY_SERVICE_URL","console","log","db","connectDB","maxRetries","retryInterval","i","createConnection","host","user","password","database","connectTimeout","ping","error","message","Promise","resolve","setTimeout","callService","url","query","variables","substring","response","method","headers","body","JSON","stringify","ok","errorText","text","Error","status","result","json","errors","data","callDeliveryRestAPI","endpoint","callProductRestAPI","typeDefs","resolvers","Query","orders","_","__","role","rows","execute","order","id","params","push","myOrders","myCart","Mutation","addToCart","product_id","quantity","productIdInt","parseInt","isNaN","productServiceUrl","productData","product","stock","existingCart","currentCartQuantity","length","totalRequestedQuantity","createOrder","shipping_address","payment_method","cartItems","total","orderItems","item","String","name","itemTotal","price","orderResult","orderId","insertId","stock_change","trackingResult","order_id","estimated_delivery","Date","now","toISOString","success","tracking","service_id","updateOrderStatus","validStatuses","includes","join","removeFromCart","updateCartItem","clearCart","cancelOrder","orderIdInt","orderRows","Order","__resolveReference","items","user_id","trackingData","trackByOrderId","OrderItem","orderItem","CartItem","cartItem","User","cart","getUserFromHeaders","req","userHeader","parse","startServer","server","schema","start","app","use","get","res","service","timestamp","context","PORT","listen","catch"],"sources":["D:/SEMESTER 8/IAE/UAS/ecommerce-platform/ecommerce-platform/frontend/src/components/Orders.js"],"sourcesContent":["const express = require('express');\r\nconst { ApolloServer } = require('@apollo/server');\r\nconst { expressMiddleware } = require('@apollo/server/express4');\r\nconst { buildSubgraphSchema } = require('@apollo/subgraph');\r\nconst { gql } = require('graphql-tag');\r\nconst mysql = require('mysql2/promise');\r\nconst cors = require('cors');\r\nconst fetch = require('node-fetch');\r\n\r\n// HARDCODED URLs for debugging - TEMPORARY FIX\r\nconst PRODUCT_SERVICE_URL = 'http://localhost:4002';\r\nconst INVENTORY_SERVICE_URL = 'http://localhost:4004';  \r\nconst DELIVERY_SERVICE_URL = 'http://localhost:4005';\r\n\r\nconsole.log('🔧 HARDCODED Service URLs:');\r\nconsole.log('  PRODUCT_SERVICE_URL:', PRODUCT_SERVICE_URL);\r\nconsole.log('  INVENTORY_SERVICE_URL:', INVENTORY_SERVICE_URL);\r\nconsole.log('  DELIVERY_SERVICE_URL:', DELIVERY_SERVICE_URL);\r\n\r\n// Database connection\r\nlet db;\r\nconst connectDB = async (maxRetries = 10, retryInterval = 5000) => {\r\n  for (let i = 0; i < maxRetries; i++) {\r\n    try {\r\n      console.log(`Attempting to connect to database... (${i + 1}/${maxRetries})`);\r\n      db = await mysql.createConnection({\r\n        host: 'localhost',\r\n        user: 'root',\r\n        password: '',\r\n        database: 'ecommerce_order',\r\n        connectTimeout: 60000,\r\n      });\r\n      \r\n      await db.ping();\r\n      console.log('✅ Database connected successfully!');\r\n      return;\r\n    } catch (error) {\r\n      console.log(`❌ Database connection failed (${i + 1}/${maxRetries}):`, error.message);\r\n      if (i === maxRetries - 1) {\r\n        throw error;\r\n      }\r\n      console.log(`⏳ Retrying in ${retryInterval / 1000} seconds...`);\r\n      await new Promise(resolve => setTimeout(resolve, retryInterval));\r\n    }\r\n  }\r\n};\r\n\r\n// Simple service call function\r\nconst callService = async (url, query, variables = {}) => {\r\n  try {\r\n    console.log('🔗 Calling service URL:', url);\r\n    console.log('📝 Query:', query.substring(0, 100) + '...');\r\n    console.log('📊 Variables:', variables);\r\n    \r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      headers: { \r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n      },\r\n      body: JSON.stringify({ query, variables })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`HTTP ${response.status}: ${errorText}`);\r\n    }\r\n    \r\n    const result = await response.json();\r\n    \r\n    if (result.errors) {\r\n      throw new Error(`GraphQL: ${result.errors[0].message}`);\r\n    }\r\n    \r\n    console.log('✅ Service call successful');\r\n    return result.data;\r\n  } catch (error) {\r\n    console.error('❌ Service call failed:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// REST API call function for delivery service\r\nconst callDeliveryRestAPI = async (endpoint, data) => {\r\n  try {\r\n    const url = `${DELIVERY_SERVICE_URL}/api/${endpoint}`;\r\n    console.log('🚚 Calling delivery API:', url);\r\n    \r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      headers: { \r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n      },\r\n      body: JSON.stringify(data)\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`HTTP ${response.status}: ${errorText}`);\r\n    }\r\n    \r\n    const result = await response.json();\r\n    console.log('✅ Delivery API call successful');\r\n    return result;\r\n  } catch (error) {\r\n    console.error('❌ Delivery API call failed:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// REST API call function for product service stock update\r\nconst callProductRestAPI = async (endpoint, data) => {\r\n  try {\r\n    const url = `${PRODUCT_SERVICE_URL}/api/${endpoint}`;\r\n    console.log('📦 Calling product API:', url);\r\n    \r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      headers: { \r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n      },\r\n      body: JSON.stringify(data)\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`HTTP ${response.status}: ${errorText}`);\r\n    }\r\n    \r\n    const result = await response.json();\r\n    console.log('✅ Product API call successful');\r\n    return result;\r\n  } catch (error) {\r\n    console.error('❌ Product API call failed:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// GraphQL Schema - FIXED parameter types to match frontend\r\nconst typeDefs = gql`\r\n  extend type Query {\r\n    orders: [Order!]!\r\n    order(id: ID!): Order\r\n    myOrders: [Order!]!\r\n    myCart: [CartItem!]!\r\n  }\r\n\r\n  extend type Mutation {\r\n    addToCart(product_id: ID!, quantity: Int!): CartItem!\r\n    removeFromCart(product_id: ID!): Boolean!\r\n    updateCartItem(product_id: ID!, quantity: Int!): CartItem!\r\n    clearCart: Boolean!\r\n    createOrder(shipping_address: String!, payment_method: String!): Order!\r\n    updateOrderStatus(id: ID!, status: String!): Order!\r\n    cancelOrder(id: ID!): Order!\r\n  }\r\n\r\n  type Order @key(fields: \"id\") {\r\n    id: ID!\r\n    user_id: ID!\r\n    total_amount: Float!\r\n    status: String!\r\n    shipping_address: String!\r\n    payment_method: String\r\n    created_at: String!\r\n    updated_at: String!\r\n    items: [OrderItem!]!\r\n    user: User\r\n    tracking: DeliveryTracking\r\n  }\r\n\r\n  type OrderItem {\r\n    id: ID!\r\n    order_id: ID!\r\n    product_id: ID!\r\n    quantity: Int!\r\n    price: Float!\r\n    product: Product\r\n  }\r\n\r\n  type CartItem {\r\n    id: ID!\r\n    user_id: ID!\r\n    product_id: ID!\r\n    quantity: Int!\r\n    created_at: String!\r\n    product: Product\r\n  }\r\n\r\n  type DeliveryTracking {\r\n    service_id: String!\r\n    status: String!\r\n    estimated_delivery: String\r\n    actual_delivery: String\r\n    tracking_notes: String\r\n  }\r\n\r\n  extend type User @key(fields: \"id\") {\r\n    id: ID! @external\r\n    orders: [Order!]!\r\n    cart: [CartItem!]!\r\n  }\r\n\r\n  extend type Product @key(fields: \"id\") {\r\n    id: ID! @external\r\n  }\r\n`;\r\n\r\nconst resolvers = {\r\n  Query: {\r\n    orders: async (_, __, { user }) => {\r\n      if (!user || user.role !== 'admin') throw new Error('Admin access required');\r\n      const [rows] = await db.execute('SELECT * FROM orders ORDER BY created_at DESC');\r\n      return rows;\r\n    },\r\n    \r\n    order: async (_, { id }, { user }) => {\r\n      if (!user) throw new Error('Authentication required');\r\n      \r\n      let query = 'SELECT * FROM orders WHERE id = ?';\r\n      const params = [id];\r\n      \r\n      if (user.role !== 'admin') {\r\n        query += ' AND user_id = ?';\r\n        params.push(user.id);\r\n      }\r\n      \r\n      const [rows] = await db.execute(query, params);\r\n      return rows[0];\r\n    },\r\n    \r\n    myOrders: async (_, __, { user }) => {\r\n      if (!user) throw new Error('Authentication required');\r\n      const [rows] = await db.execute(\r\n        'SELECT * FROM orders WHERE user_id = ? ORDER BY created_at DESC',\r\n        [user.id]\r\n      );\r\n      return rows;\r\n    },\r\n    \r\n    myCart: async (_, __, { user }) => {\r\n      if (!user) throw new Error('Authentication required');\r\n      const [rows] = await db.execute(\r\n        'SELECT * FROM cart WHERE user_id = ? ORDER BY created_at DESC',\r\n        [user.id]\r\n      );\r\n      return rows;\r\n    }\r\n  },\r\n  \r\n  Mutation: {\r\n    addToCart: async (_, { product_id, quantity }, { user }) => {\r\n      if (!user) throw new Error('Authentication required');\r\n      \r\n      console.log(`🛒 Adding to cart: product_id=${product_id} (${typeof product_id}), quantity=${quantity}, user=${user.id}`);\r\n      \r\n      // Convert product_id to integer for database operations\r\n      const productIdInt = parseInt(product_id);\r\n      if (isNaN(productIdInt)) {\r\n        throw new Error('Invalid product ID');\r\n      }\r\n      \r\n      // Build the full URL for product service\r\n      const productServiceUrl = `${PRODUCT_SERVICE_URL}/graphql`;\r\n      console.log('🔗 Product service URL:', productServiceUrl);\r\n      \r\n      // Verify product exists and has sufficient stock\r\n      const productData = await callService(\r\n        productServiceUrl,\r\n        `query GetProduct($id: ID!) { \r\n          product(id: $id) { \r\n            id \r\n            name\r\n            price\r\n            stock \r\n          } \r\n        }`,\r\n        { id: product_id } // Use original string ID for GraphQL\r\n      );\r\n      \r\n      if (!productData?.product) {\r\n        throw new Error('Product not found');\r\n      }\r\n      \r\n      if (productData.product.stock < quantity) {\r\n        throw new Error(`Insufficient stock available. Only ${productData.product.stock} items left.`);\r\n      }\r\n      \r\n      // Check current cart quantity for this product\r\n      const [existingCart] = await db.execute(\r\n        'SELECT quantity FROM cart WHERE user_id = ? AND product_id = ?',\r\n        [user.id, productIdInt]\r\n      );\r\n      \r\n      const currentCartQuantity = existingCart.length > 0 ? existingCart[0].quantity : 0;\r\n      const totalRequestedQuantity = currentCartQuantity + quantity;\r\n      \r\n      if (totalRequestedQuantity > productData.product.stock) {\r\n        throw new Error(`Cannot add ${quantity} items. You already have ${currentCartQuantity} in cart and only ${productData.product.stock} items available.`);\r\n      }\r\n      \r\n      // Add to cart or update existing item\r\n      await db.execute(\r\n        `INSERT INTO cart (user_id, product_id, quantity) \r\n         VALUES (?, ?, ?) \r\n         ON DUPLICATE KEY UPDATE quantity = quantity + ?`,\r\n        [user.id, productIdInt, quantity, quantity]\r\n      );\r\n      \r\n      const [rows] = await db.execute(\r\n        'SELECT * FROM cart WHERE user_id = ? AND product_id = ?',\r\n        [user.id, productIdInt]\r\n      );\r\n      \r\n      console.log('✅ Successfully added to cart');\r\n      return rows[0];\r\n    },\r\n    \r\n    createOrder: async (_, { shipping_address, payment_method }, { user }) => {\r\n      if (!user) throw new Error('Authentication required');\r\n      if (user.role !== 'customer') throw new Error('Only customers can place orders');\r\n      \r\n      console.log(`📦 Creating order for user ${user.id}`);\r\n      \r\n      // Get cart items\r\n      const [cartItems] = await db.execute(\r\n        'SELECT * FROM cart WHERE user_id = ?',\r\n        [user.id]\r\n      );\r\n      \r\n      if (cartItems.length === 0) {\r\n        throw new Error('Cart is empty');\r\n      }\r\n      \r\n      console.log(`📝 Found ${cartItems.length} items in cart`);\r\n      \r\n      // Validate products and calculate total\r\n      let total = 0;\r\n      const orderItems = [];\r\n      \r\n      const productServiceUrl = `${PRODUCT_SERVICE_URL}/graphql`;\r\n      \r\n      for (const item of cartItems) {\r\n        console.log(`🔍 Validating product ${item.product_id}`);\r\n        \r\n        const productData = await callService(\r\n          productServiceUrl,\r\n          `query GetProduct($id: ID!) { \r\n            product(id: $id) { \r\n              id \r\n              name\r\n              price \r\n              stock \r\n            } \r\n          }`,\r\n          { id: String(item.product_id) } // Convert to string for GraphQL\r\n        );\r\n        \r\n        if (!productData?.product) {\r\n          throw new Error(`Product ${item.product_id} not found`);\r\n        }\r\n        \r\n        if (productData.product.stock < item.quantity) {\r\n          throw new Error(`Insufficient stock for product ${productData.product.name}. Available: ${productData.product.stock}, Requested: ${item.quantity}`);\r\n        }\r\n        \r\n        const itemTotal = productData.product.price * item.quantity;\r\n        total += itemTotal;\r\n        \r\n        orderItems.push({\r\n          product_id: item.product_id,\r\n          quantity: item.quantity,\r\n          price: productData.product.price\r\n        });\r\n      }\r\n      \r\n      console.log(`💰 Order total: $${total}`);\r\n      \r\n      // Create order\r\n      const [orderResult] = await db.execute(\r\n        'INSERT INTO orders (user_id, total_amount, shipping_address, payment_method) VALUES (?, ?, ?, ?)',\r\n        [user.id, total, shipping_address, payment_method]\r\n      );\r\n      \r\n      const orderId = orderResult.insertId;\r\n      console.log(`📄 Created order ${orderId}`);\r\n      \r\n      // Create order items\r\n      for (const item of orderItems) {\r\n        await db.execute(\r\n          'INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)',\r\n          [orderId, item.product_id, item.quantity, item.price]\r\n        );\r\n      }\r\n      \r\n      // Update product stock for each item using REST API\r\n      console.log('📦 Updating product stock...');\r\n      for (const item of orderItems) {\r\n        try {\r\n          await callProductRestAPI('update-stock', {\r\n            product_id: item.product_id,\r\n            stock_change: -item.quantity // Negative value to reduce stock\r\n          });\r\n          console.log(`✅ Updated stock for product ${item.product_id}: -${item.quantity}`);\r\n        } catch (error) {\r\n          console.error(`❌ Failed to update stock for product ${item.product_id}:`, error.message);\r\n          // Continue with other products, don't fail the entire order\r\n        }\r\n      }\r\n      \r\n      // Create delivery tracking automatically\r\n      console.log('🚚 Creating delivery tracking...');\r\n      try {\r\n        const trackingResult = await callDeliveryRestAPI('create-tracking', {\r\n          order_id: orderId,\r\n          estimated_delivery: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString() // 7 days from now\r\n        });\r\n        \r\n        if (trackingResult.success) {\r\n          console.log(`✅ Created delivery tracking: ${trackingResult.tracking.service_id}`);\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Failed to create delivery tracking:', error.message);\r\n        // Don't fail the order if tracking creation fails\r\n      }\r\n      \r\n      // Clear cart\r\n      await db.execute('DELETE FROM cart WHERE user_id = ?', [user.id]);\r\n      console.log('🧹 Cart cleared');\r\n      \r\n      // Return created order\r\n      const [rows] = await db.execute('SELECT * FROM orders WHERE id = ?', [orderId]);\r\n      console.log('✅ Order created successfully');\r\n      return rows[0];\r\n    },\r\n    \r\n    updateOrderStatus: async (_, { id, status }, { user }) => {\r\n      if (!user || user.role !== 'admin') throw new Error('Admin access required');\r\n      \r\n      // Valid status values\r\n      const validStatuses = ['pending', 'processing', 'shipped', 'delivered', 'cancelled'];\r\n      if (!validStatuses.includes(status)) {\r\n        throw new Error(`Invalid status. Must be one of: ${validStatuses.join(', ')}`);\r\n      }\r\n      \r\n      await db.execute(\r\n        'UPDATE orders SET status = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?',\r\n        [status, id]\r\n      );\r\n      \r\n      const [rows] = await db.execute('SELECT * FROM orders WHERE id = ?', [id]);\r\n      \r\n      if (rows.length === 0) {\r\n        throw new Error('Order not found');\r\n      }\r\n      \r\n      return rows[0];\r\n    },\r\n    \r\n    removeFromCart: async (_, { product_id }, { user }) => {\r\n      if (!user) throw new Error('Authentication required');\r\n      \r\n      const productIdInt = parseInt(product_id);\r\n      if (isNaN(productIdInt)) {\r\n        throw new Error('Invalid product ID');\r\n      }\r\n      \r\n      await db.execute(\r\n        'DELETE FROM cart WHERE user_id = ? AND product_id = ?',\r\n        [user.id, productIdInt]\r\n      );\r\n      \r\n      return true;\r\n    },\r\n    \r\n    updateCartItem: async (_, { product_id, quantity }, { user }) => {\r\n      if (!user) throw new Error('Authentication required');\r\n      \r\n      const productIdInt = parseInt(product_id);\r\n      if (isNaN(productIdInt)) {\r\n        throw new Error('Invalid product ID');\r\n      }\r\n      \r\n      if (quantity <= 0) {\r\n        // Remove item if quantity is 0 or negative\r\n        await db.execute(\r\n          'DELETE FROM cart WHERE user_id = ? AND product_id = ?',\r\n          [user.id, productIdInt]\r\n        );\r\n        return null;\r\n      }\r\n      \r\n      // Verify product exists and has sufficient stock\r\n      const productServiceUrl = `${PRODUCT_SERVICE_URL}/graphql`;\r\n      const productData = await callService(\r\n        productServiceUrl,\r\n        `query GetProduct($id: ID!) { \r\n          product(id: $id) { \r\n            id \r\n            stock \r\n          } \r\n        }`,\r\n        { id: product_id }\r\n      );\r\n      \r\n      if (!productData?.product) {\r\n        throw new Error('Product not found');\r\n      }\r\n      \r\n      if (productData.product.stock < quantity) {\r\n        throw new Error(`Insufficient stock available. Only ${productData.product.stock} items in stock.`);\r\n      }\r\n      \r\n      await db.execute(\r\n        'UPDATE cart SET quantity = ? WHERE user_id = ? AND product_id = ?',\r\n        [quantity, user.id, productIdInt]\r\n      );\r\n      \r\n      const [rows] = await db.execute(\r\n        'SELECT * FROM cart WHERE user_id = ? AND product_id = ?',\r\n        [user.id, productIdInt]\r\n      );\r\n      \r\n      return rows[0];\r\n    },\r\n    \r\n    clearCart: async (_, __, { user }) => {\r\n      if (!user) throw new Error('Authentication required');\r\n      \r\n      await db.execute('DELETE FROM cart WHERE user_id = ?', [user.id]);\r\n      return true;\r\n    },\r\n\r\n    cancelOrder: async (_, { id }, { user }) => {\r\n      if (!user) throw new Error('Authentication required');\r\n      \r\n      const orderIdInt = parseInt(id);\r\n      if (isNaN(orderIdInt)) {\r\n        throw new Error('Invalid order ID');\r\n      }\r\n      \r\n      // Check if user owns the order (customers) or is admin\r\n      let query = 'SELECT * FROM orders WHERE id = ?';\r\n      const params = [orderIdInt];\r\n      \r\n      if (user.role !== 'admin') {\r\n        query += ' AND user_id = ?';\r\n        params.push(user.id);\r\n      }\r\n      \r\n      const [orderRows] = await db.execute(query, params);\r\n      \r\n      if (orderRows.length === 0) {\r\n        throw new Error('Order not found or access denied');\r\n      }\r\n      \r\n      const order = orderRows[0];\r\n      \r\n      if (order.status === 'delivered') {\r\n        throw new Error('Cannot cancel delivered order');\r\n      }\r\n      \r\n      if (order.status === 'cancelled') {\r\n        throw new Error('Order is already cancelled');\r\n      }\r\n      \r\n      // Update order status to cancelled\r\n      await db.execute(\r\n        'UPDATE orders SET status = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?',\r\n        ['cancelled', orderIdInt]\r\n      );\r\n      \r\n      // Restore stock for cancelled orders\r\n      const [orderItems] = await db.execute(\r\n        'SELECT * FROM order_items WHERE order_id = ?',\r\n        [orderIdInt]\r\n      );\r\n      \r\n      for (const item of orderItems) {\r\n        try {\r\n          await callProductRestAPI('update-stock', {\r\n            product_id: item.product_id,\r\n            stock_change: item.quantity // Positive value to restore stock\r\n          });\r\n          console.log(`✅ Restored stock for product ${item.product_id}: +${item.quantity}`);\r\n        } catch (error) {\r\n          console.error(`❌ Failed to restore stock for product ${item.product_id}:`, error.message);\r\n        }\r\n      }\r\n      \r\n      const [rows] = await db.execute('SELECT * FROM orders WHERE id = ?', [orderIdInt]);\r\n      return rows[0];\r\n    }\r\n  },\r\n  \r\n  Order: {\r\n    __resolveReference: async (order) => {\r\n      const [rows] = await db.execute('SELECT * FROM orders WHERE id = ?', [order.id]);\r\n      return rows[0];\r\n    },\r\n    \r\n    items: async (order) => {\r\n      const [rows] = await db.execute('SELECT * FROM order_items WHERE order_id = ?', [order.id]);\r\n      return rows;\r\n    },\r\n    \r\n    user: async (order) => {\r\n      return { id: order.user_id };\r\n    },\r\n\r\n    tracking: async (order) => {\r\n      try {\r\n        // Call delivery service to get tracking info by looking for TRK + order.id pattern\r\n        const trackingData = await callService(\r\n          `${DELIVERY_SERVICE_URL}/graphql`,\r\n          `query TrackByOrderId($order_id: String!) {\r\n            trackByOrderId(order_id: $order_id) {\r\n              service_id\r\n              status\r\n              estimated_delivery\r\n              actual_delivery\r\n              tracking_notes\r\n            }\r\n          }`,\r\n          { order_id: String(order.id) }\r\n        );\r\n        \r\n        return trackingData?.trackByOrderId || null;\r\n      } catch (error) {\r\n        console.error('Error fetching tracking info:', error.message);\r\n        return null;\r\n      }\r\n    }\r\n  },\r\n  \r\n  OrderItem: {\r\n    product: async (orderItem) => {\r\n      return { id: String(orderItem.product_id) };\r\n    }\r\n  },\r\n  \r\n  CartItem: {\r\n    product: async (cartItem) => {\r\n      return { id: String(cartItem.product_id) };\r\n    }\r\n  },\r\n  \r\n  User: {\r\n    orders: async (user) => {\r\n      const [rows] = await db.execute(\r\n        'SELECT * FROM orders WHERE user_id = ? ORDER BY created_at DESC',\r\n        [user.id]\r\n      );\r\n      return rows;\r\n    },\r\n    \r\n    cart: async (user) => {\r\n      const [rows] = await db.execute(\r\n        'SELECT * FROM cart WHERE user_id = ? ORDER BY created_at DESC',\r\n        [user.id]\r\n      );\r\n      return rows;\r\n    }\r\n  }\r\n};\r\n\r\n// Helper function to get user from headers\r\nconst getUserFromHeaders = (req) => {\r\n  const userHeader = req.headers.user;\r\n  return userHeader ? JSON.parse(userHeader) : null;\r\n};\r\n\r\nasync function startServer() {\r\n  await connectDB();\r\n  \r\n  const server = new ApolloServer({\r\n    schema: buildSubgraphSchema([{ typeDefs, resolvers }])\r\n  });\r\n\r\n  await server.start();\r\n\r\n  const app = express();\r\n  app.use(cors());\r\n  app.use(express.json());\r\n\r\n  // Health check endpoint\r\n  app.get('/health', async (req, res) => {\r\n    try {\r\n      await db.ping();\r\n      res.json({ status: 'OK', service: 'order-service', timestamp: new Date().toISOString() });\r\n    } catch (error) {\r\n      console.error('Health check failed:', error);\r\n      res.status(500).json({ status: 'ERROR', service: 'order-service', error: error.message });\r\n    }\r\n  });\r\n\r\n  app.use(\r\n    '/graphql',\r\n    expressMiddleware(server, {\r\n      context: async ({ req }) => {\r\n        const user = getUserFromHeaders(req);\r\n        return { user };\r\n      },\r\n    })\r\n  );\r\n\r\n  const PORT = 4003;\r\n  app.listen(PORT, () => {\r\n    console.log(`🚀 Order service ready at http://localhost:${PORT}/graphql`);\r\n    console.log(`🏥 Health check available at http://localhost:${PORT}/health`);\r\n  });\r\n}\r\n\r\nstartServer().catch(console.error);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}